package gmlewis/gzip

alias @gmlewis/flate as @flate
alias @gmlewis/io as @io
alias @moonbitlang/x/time as @time

// Values
let best_speed : CompressionLevel

let err_checksum : @io.IOError

let err_header : @io.IOError

let err_unexpected_eof : @io.IOError

let ioeof : @io.IOError

// Types and methods
pub(all) type CompressionLevel Int
impl Compare for CompressionLevel
impl Eq for CompressionLevel
impl Show for CompressionLevel

pub(all) struct Header {
  comment : String
  extra : Array[Byte]
  mod_time : @time.PlainDateTime?
  name : String
  os : Byte
}
impl Header {
  new() -> Self
}

pub(all) struct Reader {
  header : Header
  // private fields
}
impl Reader {
  close(Self) -> @io.IOError?
  multistream(Self, Bool) -> Unit
  new(&@flate.Reader) -> (Self, @io.IOError?)
  read(Self, @io.Slice[Byte]) -> (Int, @io.IOError?)
  reset(Self, &@flate.Reader) -> @io.IOError?
}

pub(all) struct Writer {
  header : Header
  w : &@io.Writer
  level : CompressionLevel
  wrote_header : Bool
  closed : Bool
  buf : Array[Byte]
  compressor : &@io.WriteCloser
  digest : UInt
  size : UInt
  err : @io.IOError?
}
impl Writer {
  close(Self) -> @io.IOError?
  flush(Self) -> @io.IOError?
  new(&@io.Writer) -> Self
  write(Self, @io.Slice[Byte]) -> (Int, @io.IOError?)
}

// Type aliases

// Traits

